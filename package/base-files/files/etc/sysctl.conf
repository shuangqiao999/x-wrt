# User defined entries should be added to this file not to /etc/sysctl.d/* as
# that directory is not backed-up by default and will not survive a reimage


# ===== 文件系统优化 =====
fs.file-max = 2097152
fs.nr_open = 1048576
fs.aio-max-nr = 1048576           # ↑↑↑ 大幅提高以适应NVMe SSD多队列和高性能场景 (从524288提升)
fs.inotify.max_user_instances = 16384    # ↑↑ 进一步增强文件监控能力 (从8192提升)
fs.inotify.max_user_watches = 1048576    # ↑↑↑ 大幅提高以适应大量连接 (从524288提升)

# ===== 内核网络核心优化 =====
net.core.busy_poll = 50                 # ↓ [核心调整] 降低轮询时间，减少CPU占用，提高响应性
net.core.busy_read = 50                 # ↓ 同上
net.core.rmem_default = 8192           # ↓↓ [核心调整] 进一步降低小包默认缓冲区 (从16384降低)
net.core.wmem_default = 8192           # ↓↓ 进一步减少初始内存占用 (从16384降低)
net.core.rmem_max = 536870912           # ↑↑↑ 提高到512MB，支持更大吞吐量 (从256MB提升)
net.core.wmem_max = 536870912           # ↑↑↑ 大吞吐量支持 (从256MB提升)
net.core.netdev_max_backlog = 300000    # ↓ [核心调整] 降低队列长度，减少延迟 (从600000降低)
net.core.netdev_budget = 60000         # ↓ [核心调整] 降低单次处理包数，提高响应性 (从120000降低)
net.core.somaxconn = 262144             # ↑↑ 进一步提高连接队列大小 (从131072提升)
net.core.optmem_max = 67108864          # ↑↑↑ 加速辅助数据传递 (从32MB提升到64MB)
net.core.dev_weight = 256               # ↓↓ [核心调整] 进一步降低NAPI权重 (从512降低)
net.core.message_cost = 2               # ↓↓ 进一步降低消息成本 (从5降低)
net.core.message_burst = 200            # ↑↑ 进一步提高消息突发容量 (从100提升)

# ===== TCP协议栈优化 =====
net.ipv4.tcp_rmem = 4096 87380 536870912 # ↑↑ 最大接收窗口512MB (从256MB提升)
net.ipv4.tcp_wmem = 2048 8192 536870912 # ↑↑ 最大发送窗口512MB，初始值更小适应小包 (初始值从4096降低)
net.ipv4.tcp_mem = 7864320 10485760 15728640 # ↑ 适配8GB内存计算，提高TCP内存限制 (根据内存计算调整)
net.ipv4.tcp_max_tw_buckets = 180000    # ↓ [核心调整] 降低TIME-WAIT套接字数量，减少内存占用 (从360000降低)
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_max_syn_backlog = 524288   # ↑↑ 进一步提高SYN队列大小 (从262144提升)
net.ipv4.tcp_tw_reuse = 2               # ↑ [核心调整] 使用更积极的TIME-WAIT重用策略
net.ipv4.tcp_fin_timeout = 3            # ↓↓↓ 进一步减少连接关闭等待 (从5降低到3)
net.ipv4.tcp_slow_start_after_idle = 0
net.ipv4.tcp_ecn = 1                    # ↓ [核心调整] 改为1，仅在双方支持时启用ECN
net.ipv4.tcp_sack = 1
net.ipv4.tcp_dsack = 1
net.ipv4.tcp_notsent_lowat = 2048       # ↓↓↓ 进一步降低发送延迟，适应小包场景 (从4096降低)
net.ipv4.tcp_congestion_control = bbr
net.ipv4.tcp_mtu_probing = 2            # ↑ [核心调整] 启用更积极的MTU探测
net.ipv4.tcp_timestamps = 1             # ↑ 启用时间戳，提高性能
net.ipv4.tcp_window_scaling = 1         # ↑ 启用窗口缩放
net.ipv4.tcp_workaround_signed_windows = 0 # ↓ 禁用有签名窗口工作区
net.ipv4.tcp_thin_linear_timeouts = 1   # ↑ 启用thin线性超时
net.ipv4.tcp_syn_retries = 3            # ↓ 减少SYN重试次数，加快连接失败检测
net.ipv4.tcp_synack_retries = 3         # ↓ 减少SYN-ACK重试次数

# ===== UDP协议栈优化 =====
net.ipv4.udp_mem = 7864320 10485760 15728640 # ↑ 内存池扩大，适应高UDP流量 (根据内存计算调整)
net.ipv4.udp_rmem_min = 4096            # ↓↓ 进一步降低最小接收内存，适应小包 (从8192降低)
net.ipv4.udp_wmem_min = 4096            # ↓↓ 进一步降低最小发送内存，适应小包 (从8192降低)

# ===== 连接跟踪优化 =====
net.netfilter.nf_conntrack_max = 1048576 # ↓↓ 调整为1M，进一步减少内存使用 (从2M降低)
net.netfilter.nf_conntrack_buckets = 262144 # ↓↓ 桶数调整为262144 (从524288降低)
net.netfilter.nf_conntrack_tcp_timeout_established = 1800 # ↓ 缩短已建立连接超时 (从3600降低)
net.netfilter.nf_conntrack_udp_timeout_stream = 60 # ↓↓ UDP流超时进一步缩短 (从120降低)
net.netfilter.nf_conntrack_tcp_timeout_time_wait = 5 # ↓↓ 缩短TIME_WAIT超时 (从10降低)
net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 10 # ↓ 缩短FIN_WAIT超时 (从15降低)
net.netfilter.nf_conntrack_tcp_loose = 1 # ↑ 启用宽松TCP连接跟踪

# ===== 虚拟内存优化 =====
vm.swappiness = 0                       # ↓ 进一步降低交换倾向 (从0调整为1)
vm.dirty_ratio = 5                      # ↓↓ 减少脏页累积，提高响应性 (从10降低)
vm.dirty_background_ratio = 2           # ↓↓ 后台写回阈值进一步降低 (从3降低)
vm.min_free_kbytes = 524288             # ↑↑↑ 保留更多空闲内存，适应高网络负载 (从262144提升)
vm.vfs_cache_pressure = 50              # ↓↓ 降低缓存回收压力，提高文件系统性能 (从100降低)
vm.dirty_writeback_centisecs = 300      # ↓↓ 减少脏页写回频率 (从500降低)
vm.dirty_expire_centisecs = 1500        # ↓↓ 减少脏页过期时间 (从3000降低)
vm.zone_reclaim_mode = 0                # ↑ 禁用区域回收模式，提高性能
vm.page-cluster = 0                     # ↑ 减少页面集群大小，提高响应性

# ===== 安全加固 =====
kernel.kptr_restrict = 1                # ↑ 增加安全性 (从0调整为1)
kernel.perf_event_paranoid = 2          # ↑ 增加安全性 (从-1调整为2)
net.ipv4.conf.all.rp_filter = 2         # ↑ 使用严格模式RP过滤 (从1调整为2)
net.ipv4.tcp_syncookies = 1
net.ipv4.conf.all.forwarding = 1
net.ipv4.conf.default.forwarding = 1
net.ipv4.conf.all.accept_redirects = 0   # ↑ 安全加固
net.ipv4.conf.all.send_redirects = 0     # ↑ 安全加固
net.ipv4.icmp_echo_ignore_broadcasts = 1 # ↑ 安全加固
net.ipv4.icmp_ignore_bogus_error_responses = 1 # ↑ 安全加固
net.ipv4.tcp_rfc1337 = 1                 # ↑ 启用RFC1337保护

# ===== 64字节小包专用优化 =====
net.ipv4.tcp_min_tso_segs = 2            # ↓↓ 进一步减少TSO分段数，适应小包 (从4降低)
net.ipv4.tcp_no_metrics_save = 1         # ↑ 禁用TCP指标保存，提高性能
net.ipv4.tcp_limit_output_bytes = 262144 # ↑↑ 提高TCP输出限制 (从131072提升)
net.ipv4.tcp_adv_win_scale = 3           # ↑ 调整TCP窗口缩放因子 (从2提升)
net.ipv4.tcp_min_rtt_wlen = 300          # ↑ 减少RTT测量窗口，提高响应性
net.ipv4.tcp_moderate_rcvbuf = 1         # ↑ 启用接收缓冲区自动调整
net.ipv4.tcp_autocorking = 0             # ↓ 禁用自动corking，减少小包延迟